name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: mytestdb  # <-- Dedicated test DB name
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        env:
          DATABASE_URL: postgresql://user:password@localhost:5432/mytestdb
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          playwright install  # if you use Playwright for e2e tests

      - name: Run tests
        env:
          DATABASE_URL: postgresql://user:password@localhost:5432/mytestdb
        run: |
          source venv/bin/activate

          # 1) Unit tests
          pytest tests/unit/ --cov=src --junitxml=test-results/junit.xml

          # 2) Integration tests
          pytest tests/integration/

          # 3) E2E or other tests
          pytest tests/e2e/

  security:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Trivy system dependencies # Added this for Trivy to run without crashing
        run: |
          sudo apt-get update
          sudo apt-get install -y libsqlite3-dev
          # You might also add other general dev libs if needed:
          # sudo apt-get install -y build-essential libssl-dev zlib1g-dev libffi-dev

      - name: Build image # Added --no-cache to force a fresh build and avoid stale layers
        run: docker build -t app:test . --no-cache

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'app:test'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

  deploy:
    needs: security
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          # Removed 'ecr: auto' as it conflicts with Docker Hub login

      - uses: docker/build-push-action@v5
        with:
          push: true
          tags: |
            camhannah/module14_is601:latest            # Corrected Docker Hub username and repo name
            camhannah/module14_is601:${{ github.sha }} # Corrected Docker Hub username and repo name
          platforms: linux/amd64,linux/arm64
          cache-from: type=registry,ref=camhannah/module14_is601:cache # Corrected Docker Hub username and repo name
          cache-to: type=inline,mode=max
          pull: true # Added to ensure base images are pulled fresh, helping with cache issues
